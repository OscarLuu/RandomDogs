{"version":3,"sources":["dogs.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","DogImage","props","src","url","Weather","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dogs","dogSelected","dogImg","handleChange","bind","assertThisInitialized","e","_this2","setState","target","value","fetch","then","response","json","responseJson","array","values","_this3","keys","message","console","log","onChange","selected","disabled","map","dog","key","slice","toUpperCase","length","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAMA,SAASA,IACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,8BAKN,SAASC,EAASC,GAChB,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMG,IAAKD,EAAME,WAuEvBC,cAjEb,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMP,KACDW,MAAQ,CACXC,KAAM,GACNC,YAAa,GACbC,OAAQ,IAEVV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPHA,4EAUNc,GAAG,IAAAC,EAAAZ,KACdA,KAAKa,SAAS,CACZP,YAAaK,EAAEG,OAAOC,QAExBC,MAlCQ,6BAkCIL,EAAEG,OAAOC,MAjCV,kBAkCRE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAMC,EAAQvB,OAAOwB,OAAOF,GAC5BR,EAAKC,SAAS,CACZN,OAAQc,EAAM,mDAKF,IAAAE,EAAAvB,KAClBgB,MAAM,uCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAMC,EAAQvB,OAAO0B,KAAKJ,EAAaK,SACvCC,QAAQC,IAAIN,GACZE,EAAKV,SAAS,CACZR,KAAMgB,uCAMZ,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,wDAEEF,EAAAC,EAAAC,cAAA,UACEC,UAAU,SACVwB,MAAOf,KAAKI,MAAME,YAClBsB,SAAU5B,KAAKQ,cAEfpB,EAAAC,EAAAC,cAAA,UAAQuC,UAAQ,EAACC,UAAQ,IACxB9B,KAAKI,MAAMC,KAAK0B,IAAI,SAASC,GAC5B,OACE5C,EAAAC,EAAAC,cAAA,UAAQ2C,IAAKD,EAAKjB,MAAOiB,GACtBA,EAAIE,MAAM,EAAG,GAAGC,cAAgBH,EAAIE,MAAM,EAAGF,EAAII,cAO9DhD,EAAAC,EAAAC,cAACE,EAAD,CAAUG,IAAKK,KAAKI,MAAMG,iBA5DZ8B,IAAMC,WCbbC,mLAJX,OAAOnD,EAAAC,EAAAC,cAACe,EAAD,aAFOiC,aCSEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.6f79fd5b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst API = \"https://dog.ceo/api/breed/\";\r\nconst endAPI = \"/images/random\";\r\n\r\nfunction Title() {\r\n  return (\r\n    <div>\r\n      <h1 className=\"Title\">Random Dog Image by Breed</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DogImage(props) {\r\n  return (\r\n    <div>\r\n      <img className=\"dog\" src={props.url} />\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dogs: [],\r\n      dogSelected: \"\",\r\n      dogImg: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      dogSelected: e.target.value\r\n    });\r\n    fetch(API + e.target.value + endAPI)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        const array = Object.values(responseJson);\r\n        this.setState({\r\n          dogImg: array[1]\r\n        });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://dog.ceo/api/breeds/list/all\")\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        const array = Object.keys(responseJson.message);\r\n        console.log(array);\r\n        this.setState({\r\n          dogs: array\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Title />\r\n        <form>\r\n          <label>\r\n            Pick a dog breed and get a random image:\r\n            <select\r\n              className=\"select\"\r\n              value={this.state.dogSelected}\r\n              onChange={this.handleChange}\r\n            >\r\n              <option selected disabled />\r\n              {this.state.dogs.map(function(dog) {\r\n                return (\r\n                  <option key={dog} value={dog}>\r\n                    {dog.slice(0, 1).toUpperCase() + dog.slice(1, dog.length)}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </label>\r\n        </form>\r\n        <DogImage url={this.state.dogImg} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport Dogs from \"./dogs\";\n\nclass App extends Component {\n  render() {\n    return <Dogs />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}